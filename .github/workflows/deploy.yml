name: Pipeline Frontend
run-name: ðŸš€ UsuÃ¡rio ( ${{ github.actor }} ) Branch ( ${{ github.ref_name }} )  ðŸš€

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip build]') }}
    steps:
      - name: Checkout Project
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Read version from package.json
        id: get_project_version
        run: |
          VERSION=$(cat package.json | jq -r '.version')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Project Version $VERSION"

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          target: deploy
          tags: |
            ${{ secrets.DOCKER_LOGIN }}/multitreine:frontend-${{ env.VERSION }}
            ${{ secrets.DOCKER_LOGIN }}/multitreine:frontend-latest
          build-args: |
            COCKPIT_URL=${{ secrets.COCKPIT_URL }}
            COCKPIT_API_KEY_LP=${{ secrets.COCKPIT_API_KEY_LP }}
  
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') }}
    env:
      PATH_DEPLOY: ./servicos/multitreine_frontend
    steps:
      - name: Checkout Project
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup SSH Config
        run: |
          mkdir -p ~/.ssh
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
          cat ~/.ssh/config

      - name: Setup Deploy Paths
        run: |
          ssh  root@${{ secrets.SSH_HOST }} "mkdir -p $PATH_DEPLOY"
          scp docker-compose.prod.yaml root@${{ secrets.SSH_HOST }}:$PATH_DEPLOY/docker-compose.yaml
      
      - name: Deploy Docker Compose
        run: |
          ssh  root@${{ secrets.SSH_HOST }} "cd $PATH_DEPLOY && docker compose down && docker compose up -d"